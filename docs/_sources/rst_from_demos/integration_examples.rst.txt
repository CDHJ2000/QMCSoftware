Integration Examples using QMCPy package
========================================

.. code:: ipython3

    from qmcpy import *
    
    from numpy import arange

Keister Example
---------------

Keister Integrand: - :math:`y_i = \pi^{d/2} * \cos(||x_i||_2)`

Gaussian True Measure: - :math:`\mathcal{N}(0,\frac{1}{2})`

Sobol Discrete Distribution: -
:math:`x_j \overset{lds}{\sim} \mathcal{U}(0,1)`

.. code:: ipython3

    dim = 3
    integrand = Keister(dim)
    discrete_distrib = Sobol(rng_seed=7)
    true_measure = Gaussian(dim, variance=1 / 2)
    stopping_criterion = CLTRep(discrete_distrib, true_measure, abs_tol=.05)
    _, data = integrate(integrand, true_measure, discrete_distrib, stopping_criterion)
    print(data)


.. parsed-literal::

    Solution: 2.1716         
    Keister (Integrand Object)
    Sobol (Discrete Distribution Object)
    	mimics          StdUniform
    	rng_seed        7
    	backend         pytorch
    Gaussian (True Measure Object)
    	dimension       3
    	mu              0
    	sigma           0.707
    CLTRep (Stopping Criterion Object)
    	abs_tol         0.050
    	rel_tol         0
    	n_max           1073741824
    	inflate         1.200
    	alpha           0.010
    MeanVarDataRep (AccumData Object)
    	n               128
    	n_total         128
    	confid_int      [ 2.164  2.179]
    	time_total      0.008
    	r               16
    


Asian Option Pricing Example
----------------------------

Single Level
~~~~~~~~~~~~

Asian Call Option Integrand -
:math:`S_i(t_j)=S(0)e^{(r-\frac{\sigma^2}{2})t_j+\sigma\mathcal{B}(t_j)}`
- discounted put payoff
:math:`= max(K-\frac{1}{d}\sum_{j=0}^{d-1} S(jT/d))\;,\: 0)`

Brownian Motion True Measure: -
:math:`\:\: \mathcal{B}(t_j)=B(t_{j-1})+Z_j\sqrt{t_j-t_{j-1}} \;` for
:math:`\;Z_j \sim \mathcal{N}(0,1)`

Lattice Discrete Distribution: -
:math:`\:\: x_j \overset{lds}{\sim} \mathcal{U}(0,1)`

.. code:: ipython3

    time_vec = [arange(1 / 64, 65 / 64, 1 / 64)]
    dim = [len(tv) for tv in time_vec]
    
    discrete_distrib = Lattice(rng_seed=7)
    true_measure = BrownianMotion(dim, time_vector=time_vec)
    integrand = AsianCall(true_measure,
                    volatility = .5,
                    start_price = 30,
                    strike_price = 25,
                    interest_rate = .01,
                    mean_type = 'geometric')
    stopping_criterion = CLTRep(discrete_distrib, true_measure, abs_tol=.05)
    _, data = integrate(integrand, true_measure, discrete_distrib, stopping_criterion)
    print(data)


.. parsed-literal::

    Solution: 5.8356         
    AsianCall (Integrand Object)
    	volatility      0.500
    	start_price     30
    	strike_price    25
    	interest_rate   0.010
    	mean_type       geometric
    	exercise_time   1
    Lattice (Discrete Distribution Object)
    	mimics          StdUniform
    	rng_seed        7
    BrownianMotion (True Measure Object)
    	dimension       64
    	time_vector     [ 0.016  0.031  0.047 ...  0.969  0.984  1.000]
    CLTRep (Stopping Criterion Object)
    	abs_tol         0.050
    	rel_tol         0
    	n_max           1073741824
    	inflate         1.200
    	alpha           0.010
    MeanVarDataRep (AccumData Object)
    	n               2048
    	n_total         2048
    	confid_int      [ 5.833  5.838]
    	time_total      0.318
    	r               16
    


Asian Option Pricing Example
----------------------------

Multi-Level
~~~~~~~~~~~

:math:`Y_0 = 0`

:math:`Y_1` = Asian Option Monitored at
:math:`t=[\frac{1}{4}, \frac{1}{2}, \frac{3}{4}, 1]`

:math:`Y_2` = Asian Option Monitored at
:math:`t=[\frac{1}{16}, \frac{1}{8}, ... , 1]`

:math:`Y_3` = Asian Option Monitored at
:math:`t=[\frac{1}{64}, \frac{1}{32}, ... , 1]`

:math:`Z_1 = \mathbb{E}[Y_1-Y_0] + \mathbb{E}[Y_2-Y_1] + \mathbb{E}[Y_3-Y_2] = \mathbb{E}[Y_3]`

.. code:: ipython3

    time_vec = [arange(1 / 4, 5 / 4, 1 / 4),
                     arange(1 / 16, 17 / 16, 1 / 16),
                     arange(1 / 64, 65 / 64, 1 / 64)]
    dim = [len(tv) for tv in time_vec]
    
    discrete_distrib = IIDStdGaussian(rng_seed=7)
    true_measure = BrownianMotion(dim, time_vector=time_vec)
    integrand = AsianCall(true_measure,
                    volatility = .5,
                    start_price = 30,
                    strike_price = 25,
                    interest_rate = .01,
                    mean_type = 'geometric')
    stopping_criterion = CLT(discrete_distrib, true_measure, abs_tol=.05, n_max = 1e10)
    _, data = integrate(integrand, true_measure, discrete_distrib, stopping_criterion)
    print(data)


.. parsed-literal::

    Solution: 5.8344         
    AsianCall (Integrand Object)
    	volatility      [ 0.500  0.500  0.500]
    	start_price     [30 30 30]
    	strike_price    [25 25 25]
    	interest_rate   [ 0.010  0.010  0.010]
    	mean_type       ['geometric' 'geometric' 'geometric']
    	exercise_time   [ 1.000  1.000  1.000]
    IIDStdGaussian (Discrete Distribution Object)
    	mimics          StdGaussian
    BrownianMotion (True Measure Object)
    	dimension       [ 4 16 64]
    	time_vector     [array([ 0.250,  0.500,  0.750,  1.000])
    	                array([ 0.062,  0.125,  0.188, ...,  0.875,  0.938,  1.000])
    	                array([ 0.016,  0.031,  0.047, ...,  0.969,  0.984,  1.000])]
    CLT (Stopping Criterion Object)
    	abs_tol         0.050
    	rel_tol         0
    	n_max           10000000000
    	inflate         1.200
    	alpha           0.010
    MeanVarData (AccumData Object)
    	n               [ 249427.000  31202.000  5566.000]
    	n_total         289267
    	confid_int      [ 5.786  5.883]
    	time_total      0.093
    


